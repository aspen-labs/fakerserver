Metadata-Version: 2.4
Name: http-server
Version: 0.1.0
Summary: A multithreaded REST API for generating fake/mock data for testing and development
Requires-Python: >=3.13
Description-Content-Type: text/markdown
Requires-Dist: click>=8.3.0
Requires-Dist: faker>=37.12.0

# Fake Data Generator API

A multithreaded REST API for generating fake/mock data for testing and development, built with Python and the Faker library.

## Features

- Multithreaded request handling for concurrent connections
- 49+ different data types for fake data generation
- RESTful API endpoints with JSON responses
- Simple command-line interface using Click
- Configurable host and port
- Verbose logging option
- Interactive HTML documentation
- CORS enabled for easy integration

## Installation

Install dependencies using uv:

```bash
uv sync
```

## Usage

### Start the Server

After installation, start the API server:

```bash
uv run http-server
```

The server will start on `http://0.0.0.0:8000` by default. Visit `http://localhost:8000/` in your browser for interactive API documentation.

### Command-Line Options

- `-H, --host`: Host address to bind to (default: 0.0.0.0)
- `-p, --port`: Port number to listen on (default: 8000)
- `-v, --verbose`: Enable verbose logging

### Examples

Start server on default port 8000:
```bash
uv run http-server
```

Start server on custom port:
```bash
uv run http-server -p 3000
```

Start with verbose logging:
```bash
uv run http-server -v
```

Start on specific host and port:
```bash
uv run http-server -H 127.0.0.1 -p 9000
```

## API Endpoints

### GET /api/generate
Generate fake data of a specified type.

**Parameters:**
- `type` - Type of fake data (default: name)
- `count` - Number of items to generate (1-100, default: 1)
- `locale` - Locale for data generation (default: en_US)

**Examples:**
```bash
# Generate a single email
curl "http://localhost:8000/api/generate?type=email"

# Generate 10 names
curl "http://localhost:8000/api/generate?type=name&count=10"

# Generate a complete user profile
curl "http://localhost:8000/api/generate?type=profile"

# Generate multiple user objects
curl "http://localhost:8000/api/generate?type=user&count=5"
```

### GET /api/types
Get a list of all available data types.

```bash
curl "http://localhost:8000/api/types"
```

### GET /api/health
Health check endpoint.

```bash
curl "http://localhost:8000/api/health"
```

## Available Data Types

**Personal:** name, first_name, last_name, email, phone, ssn, username, password

**Address:** address, street_address, city, state, zipcode, country, latitude, longitude

**Company:** company, job, company_email

**Internet:** url, domain_name, ipv4, ipv6, mac_address, user_agent

**Text:** text, sentence, paragraph, word

**Date/Time:** date, time, datetime, year

**Numbers:** random_int, random_digit

**Credit Card:** credit_card_number, credit_card_provider, credit_card_expire

**Currency:** currency_code, currency_name

**File:** file_name, file_extension, mime_type

**Color:** color_name, hex_color, rgb_color

**Other:** uuid4, profile (complete user profile), user (simple user object)

## Project Structure

```
fakerserver/
├── src/
│   └── http_server/
│       ├── __init__.py
│       ├── server.py       # Server implementation
│       ├── cli.py          # Command-line interface
│       ├── api_handler.py  # API request handler
│       └── fake_data.py    # Fake data generator
├── pyproject.toml          # Project configuration
└── README.md
```
